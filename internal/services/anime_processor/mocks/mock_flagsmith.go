// Code generated by MockGen. DO NOT EDIT.
// Source: flagsmith_interfaces.go
//
// Generated by this command:
//
//	mockgen -source=flagsmith_interfaces.go -destination=mocks/mock_flagsmith.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v2 "github.com/Flagsmith/flagsmith-go-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockFlagsmithClientInterface is a mock of FlagsmithClientInterface interface.
type MockFlagsmithClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlagsmithClientInterfaceMockRecorder
	isgomock struct{}
}

// MockFlagsmithClientInterfaceMockRecorder is the mock recorder for MockFlagsmithClientInterface.
type MockFlagsmithClientInterfaceMockRecorder struct {
	mock *MockFlagsmithClientInterface
}

// NewMockFlagsmithClientInterface creates a new mock instance.
func NewMockFlagsmithClientInterface(ctrl *gomock.Controller) *MockFlagsmithClientInterface {
	mock := &MockFlagsmithClientInterface{ctrl: ctrl}
	mock.recorder = &MockFlagsmithClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagsmithClientInterface) EXPECT() *MockFlagsmithClientInterfaceMockRecorder {
	return m.recorder
}

// GetEnvironmentFlags mocks base method.
func (m *MockFlagsmithClientInterface) GetEnvironmentFlags() (v2.Flags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentFlags")
	ret0, _ := ret[0].(v2.Flags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentFlags indicates an expected call of GetEnvironmentFlags.
func (mr *MockFlagsmithClientInterfaceMockRecorder) GetEnvironmentFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentFlags", reflect.TypeOf((*MockFlagsmithClientInterface)(nil).GetEnvironmentFlags))
}

// MockFlagsInterface is a mock of FlagsInterface interface.
type MockFlagsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlagsInterfaceMockRecorder
	isgomock struct{}
}

// MockFlagsInterfaceMockRecorder is the mock recorder for MockFlagsInterface.
type MockFlagsInterfaceMockRecorder struct {
	mock *MockFlagsInterface
}

// NewMockFlagsInterface creates a new mock instance.
func NewMockFlagsInterface(ctrl *gomock.Controller) *MockFlagsInterface {
	mock := &MockFlagsInterface{ctrl: ctrl}
	mock.recorder = &MockFlagsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagsInterface) EXPECT() *MockFlagsInterfaceMockRecorder {
	return m.recorder
}

// IsFeatureEnabled mocks base method.
func (m *MockFlagsInterface) IsFeatureEnabled(featureName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureEnabled", featureName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureEnabled indicates an expected call of IsFeatureEnabled.
func (mr *MockFlagsInterfaceMockRecorder) IsFeatureEnabled(featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureEnabled", reflect.TypeOf((*MockFlagsInterface)(nil).IsFeatureEnabled), featureName)
}
