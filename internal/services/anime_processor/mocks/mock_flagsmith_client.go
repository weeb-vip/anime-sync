// Code generated by MockGen. DO NOT EDIT.
// Source: flagsmith_client_interface.go
//
// Generated by this command:
//
//	mockgen -source=flagsmith_client_interface.go -destination=mocks/mock_flagsmith_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v2 "github.com/Flagsmith/flagsmith-go-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockFlagSmithClient is a mock of FlagSmithClient interface.
type MockFlagSmithClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSmithClientMockRecorder
	isgomock struct{}
}

// MockFlagSmithClientMockRecorder is the mock recorder for MockFlagSmithClient.
type MockFlagSmithClientMockRecorder struct {
	mock *MockFlagSmithClient
}

// NewMockFlagSmithClient creates a new mock instance.
func NewMockFlagSmithClient(ctrl *gomock.Controller) *MockFlagSmithClient {
	mock := &MockFlagSmithClient{ctrl: ctrl}
	mock.recorder = &MockFlagSmithClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagSmithClient) EXPECT() *MockFlagSmithClientMockRecorder {
	return m.recorder
}

// GetEnvironmentFlags mocks base method.
func (m *MockFlagSmithClient) GetEnvironmentFlags() (v2.Flags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentFlags")
	ret0, _ := ret[0].(v2.Flags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentFlags indicates an expected call of GetEnvironmentFlags.
func (mr *MockFlagSmithClientMockRecorder) GetEnvironmentFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentFlags", reflect.TypeOf((*MockFlagSmithClient)(nil).GetEnvironmentFlags))
}

// MockFlags is a mock of Flags interface.
type MockFlags struct {
	ctrl     *gomock.Controller
	recorder *MockFlagsMockRecorder
	isgomock struct{}
}

// MockFlagsMockRecorder is the mock recorder for MockFlags.
type MockFlagsMockRecorder struct {
	mock *MockFlags
}

// NewMockFlags creates a new mock instance.
func NewMockFlags(ctrl *gomock.Controller) *MockFlags {
	mock := &MockFlags{ctrl: ctrl}
	mock.recorder = &MockFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlags) EXPECT() *MockFlagsMockRecorder {
	return m.recorder
}

// IsFeatureEnabled mocks base method.
func (m *MockFlags) IsFeatureEnabled(featureName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFeatureEnabled", featureName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFeatureEnabled indicates an expected call of IsFeatureEnabled.
func (mr *MockFlagsMockRecorder) IsFeatureEnabled(featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFeatureEnabled", reflect.TypeOf((*MockFlags)(nil).IsFeatureEnabled), featureName)
}
